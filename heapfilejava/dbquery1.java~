import java.util.ArrayList;
import java.io.DataInputStream;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.Arrays;

public class dbquery
{
    public static void main(String []args)
    {
	String textQuery = "";
        String ps = "";
        int pagesize = 0;
	if(args.length != 2)
	    {
		System.out.println("Incorrect number of Arguments");
		System.exit(0);
	    }
        boolean numFound = false;
	try
	{
	    pagesize = Integer.parseInt(args[0]);
	    textQuery = args[1].toLowerCase();
	    numFound = true;
	}
	catch(NumberFormatException e)  
	{  
	    numFound = false;  
	} 
	if(!numFound)
	{
	    try
	    {
		pagesize = Integer.parseInt(args[1]);
		textQuery = args[0].toLowerCase();;
	    }
        catch(NumberFormatException e)
	    {
		System.out.println("Non-numerical pagesize entered");
		System.exit(0);
	    }
	}
        String inputname = "heap." + pagesize;
	// Searching through BNName: textQuery
	// Amount of bytes to read at a time = page size:
	ArrayList<TestPage> UnfilledPages = new ArrayList<>();
        try
	    {
		DataInputStream is = new DataInputStream(new FileInputStream(inputname));
		long startTime = System.currentTimeMillis();
		long numOfRecords = 0;
		byte[] buffer = new byte[pagesize + 8];
		int offset = 0; // Offset for each page
		int buffset = 0; // Offset within page, for each record
		int len = pagesize + 8; // length of a page + 8 is read (includes number of records
		int reccount = 0;
		TestRecord correctRecord; // record to be assigned
		boolean RecordFound = false;
		while((is.read(buffer,offset,len)) != -1 && !RecordFound) //While there are still bytes to be found and a record has not been found
		{
		    byte[] slice = Arrays.copyOfRange(buffer, 0, 8);
		    reccount = byteToLong(slice);
		    int recnum = 0;
		    buffset = 8;
		    while(recnum < reccount) // For each record in the page
		    {
			byte[] slice1 = Arrays.copyOfRange(buffer, buffset, buffset + 12); // Read BUSINESS NAMES from file
			String regname = new String(slice1);
			buffset = buffset + 12;
			
			byte[] slice2 = Arrays.copyOfRange(buffer, buffset, buffset + 4); // Read namelength to file
			int namelength = byteToInt(slice2);
			buffset = buffset + 4;
			
			byte[] slice3 = Arrays.copyOfRange(buffer, buffset, buffset + namelength); // read bnname from file
		        String bnname = new String(slice3);
			buffset = buffset + namelength;
			
			byte[] slice4 = Arrays.copyOfRange(buffer, buffset, buffset + 4); // read status length from file
		        int statuslength = byteToInt(slice4);
			buffset = buffset + 4;

			byte[] slice5 = Arrays.copyOfRange(buffer, buffset, buffset + statuslength); // read bnstatus from file
			String bnname = new String(slice5);
			buffset = buffset + statuslength;
			
			byte[] slice6 = Arrays.copyOfRange(buffer, buffset, buffset + 4); // read regdate length from file
		        int reglength = byteToInt(slice6);
			buffset = buffset + 4;

			byte[] slice7 = Arrays.copyOfRange(buffer, buffset, buffset + reglength); // read regdt from file
			String bnregdt = new String(slice7);
			buffset = buffset + 10;
			
			byte[] slice8 = Arrays.copyOfRange(buffer, buffset, buffset + 4); // read cancel date length from file
		        int cancellength = byteToInt(slice8);
			buffset = buffset + 4;

			byte[] slice9 = Arrays.copyOfRange(buffer, buffset, buffset + cancellength); // read bnstatus from file
			String bncanceldt = new String(slice9);
			buffset = buffset + cancellength;
			
			byte[] slice10 = Arrays.copyOfRange(buffer, buffset, buffset + 4); // read renew length from file
		        int renewlength = byteToInt(slice10);
			buffset = buffset + 4;

			byte[] slice11 = Arrays.copyOfRange(buffer, buffset, buffset + renewlength); // read bnstatus from file
			String bnrenewdt = new String(slice11);
			buffset = buffset + renewlength;
			
			byte[] slice12 = Arrays.copyOfRange(buffer, buffset, buffset + 4); // read status length from file
		        int statenumlength = byteToInt(slice12);
			buffset = buffset + 4;

			byte[] slice13 = Arrays.copyOfRange(buffer, buffset, buffset + statenumlength); // read bnstatus from file
			String bnstatenum = new String(slice13);
			buffset = buffset + statenumlength;
			
			byte[] slice14 = Arrays.copyOfRange(buffer, buffset, buffset + 4); // read status length from file
		        int statereglength = byteToInt(slice12);
			buffset = buffset + 4;

			byte[] slice15 = Arrays.copyOfRange(buffer, buffset, buffset + statereglength); // read bnstatus from file
			String bnstatereg = new String(slice15);
			buffset = buffset + statereglength;
			
			byte[] slice16 = Arrays.copyOfRange(buffer, buffset, buffset + 8); // read status length from file
		        long statuslength = byteToLong(slice14);
			buffset = buffset + 8;

			/*byte[] slice3 = Arrays.copyOfRange(buffer, buffset, buffset + 4);
			int countrylength = ((slice3[0] & 0xFF) << 24) | ((slice3[1] & 0xFF) << 16)
			    | ((slice3[2] & 0xFF) << 8) | (slice3[3] & 0xFF);
			
			buffset = buffset + 4;
			
			String name = new String(slice4);
			*/String bnnamelower = bnname.toLowerCase();
		        
			if(name.contains(textQuery))
			{
			    RecordFound = true;
			    System.out.println("BN_NAME: " + id + " BN_STATUS: " + code + " BN_REG_DATE: " + name + );
			}
			recnum++;
		    }
		    if(!RecordFound)
		    {
			System.out.println("No record found");
		    }
		}
		is.close();
		/*
		    Iterator<TestPage> it = UnfilledPages.iterator();
		    while(it.hasNext())
			{
			TestPage page = it.next();
			System.out.println("New Page Bytes:" + page.getBytesFilled());
			ArrayList<TestRecord> records = page.getRecords();
			Iterator<TestRecord> it2 = records.iterator();
			int pageByteCount = page.getBytesFilled();
			ByteArrayOutputStream bytestream = new ByteArrayOutputStream();
			byte[] writeBytes = new byte[pagesize];
			while(it2.hasNext())
			    {
				TestRecord record = it2.next();
				byte[] recordBytes;
				//System.out.println(record.getID());
				//System.out.println(record.getCode());
				//System.out.println(record.getName());
				byte[] id = record.getID().getBytes();
				byte[] code = record.getCode().getBytes();
				byte[] name = record.getName().getBytes();
				byte[] namelength = new byte[4];
				int nl = record.getName().length();
				namelength[0] = (byte) (nl >> 24);
				namelength[1] = (byte) (nl >> 16);
				namelength[2] = (byte) (nl >> 8);
				namelength[3] = (byte) (nl);
				bytestream.write(id);
				bytestream.write(code);
				bytestream.write(namelength);
				bytestream.write(name);
			    }
			writeBytes = bytestream.toByteArray();
			byte[] paddingBytes = new byte[pagesize-writeBytes.length];
			os.write(writeBytes,0,writeBytes.length);
			os.write(paddingBytes,0,paddingBytes.length);
			}*/
		long endTime = System.currentTimeMillis();
		long duration = (endTime - startTime);
		System.out.println("Time taken in milliseconds: " + duration);
		System.out.println("Number of records inserted: " + numOfRecords);
		System.out.println("Number of pages searched: " + numOfPages);
	    }
	catch(IOException e)
	    {
		System.exit(0);
	    }
    }
    public int static ByteToInt(byte[] slice)
    {
	int num = ((slice[0] & 0xFF) << 24) | ((slice[1] & 0xFF) << 16) | ((slice[2] & 0xFF) << 8) | (slice[3] & 0xFF)
	return num
    }
    public long static ByteToInt(byte[] slice)
    {
	long num = ((slice[0] & 0xFF) << 56) | ((slice[1] & 0xFF) << 48) | ((slice[2] & 0xFF) << 40) | ((slice[3] & 0xFF) << 32) 
	    | ((slice[4] & 0xFF) << 24) | ((slice[5] & 0xFF) << 16) | ((slice[6] & 0xFF) << 8) | (slice[7] & 0xFF)
	return num
    }
}
